import React, { useState, useEffect } from 'react';
import { 
  Settings, 
  Users, 
  MapPin, 
  Building, 
  Plus, 
  Edit3, 
  Trash2, 
  Save,
  X,
  ChevronRight,
  ChevronDown,
  Loader2,
  UserCheck
} from 'lucide-react';
import { GlobalNavigation, ConfirmDeleteModal } from '../components';
import { configuracionService } from '../services/configuracionService';
import { SociosPage } from './SociosPage';
import type { 
  TipoMembresia as TipoMembresiaAPI, 
  Cancha as CanchaAPI, 
  ConfiguracionClub as ConfiguracionClubAPI,
  CreateTipoMembresiaDto,
  CreateCanchaDto,
  UpdateConfiguracionClubDto
} from '../types/configuracion';

// Usar alias para evitar conflictos con tipos locales
interface TipoMembresia extends TipoMembresiaAPI {}
interface Cancha extends CanchaAPI {}
interface ConfiguracionClub extends Omit<ConfiguracionClubAPI, 'clubId' | 'createdAt' | 'updatedAt'> {}

type CategoriaConfig = 'general' | 'membresias' | 'canchas' | 'socios' | 'sistema';

const ConfiguracionPage: React.FC = () => {
  const [categoriaActiva, setCategoriaActiva] = useState<CategoriaConfig>('general');
  
  // Estados para datos del backend
  const [tiposMembresia, setTiposMembresia] = useState<TipoMembresia[]>([]);
  const [canchas, setCanchas] = useState<Cancha[]>([]);
  const [configClub, setConfigClub] = useState<ConfiguracionClub | null>(null);
  
  // Estados de carga
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);

  // Estados para modales
  const [mostrarModalMembresia, setMostrarModalMembresia] = useState(false);
  const [mostrarModalCancha, setMostrarModalCancha] = useState(false);
  const [nuevaMembresia, setNuevaMembresia] = useState<CreateTipoMembresiaDto>({ 
    nombre: '', 
    descripcion: '', 
    color: '#3b82f6' 
  });
  const [nuevaCancha, setNuevaCancha] = useState<CreateCanchaDto>({ 
    nombre: '', 
    ubicacion: '', 
    capacidad: 4 
  });
  
  // Estados para modal de confirmación de eliminación
  const [confirmDelete, setConfirmDelete] = useState({
    isOpen: false,
    type: '',
    item: null as any,
    title: '',
    message: ''
  });

  // Estados para expansión de detalles
  const [membresiaExpandida, setMembresiaExpandida] = useState<string | null>(null);

  // Cargar datos al montar el componente
  useEffect(() => {
    cargarDatos();
  }, []);

  const cargarDatos = async () => {
    try {
      setLoading(true);
      const [membresiaData, canchaData, configData] = await Promise.all([
        configuracionService.getTiposMembresia(),
        configuracionService.getCanchas(),
        configuracionService.getConfiguracionClub(),
      ]);
      
      setTiposMembresia(membresiaData);
      setCanchas(canchaData);
      setConfigClub(configData);
    } catch (error) {
      console.error('Error al cargar configuración:', error);
      // Aquí podrías mostrar una notificación de error
    } finally {
      setLoading(false);
    }
  };

  const categorias = [
    {
      id: 'general' as CategoriaConfig,
      nombre: 'Configuración General',
      descripcion: 'Información básica del club',
      icono: Building,
      color: '#3b82f6'
    },
    {
      id: 'membresias' as CategoriaConfig,
      nombre: 'Tipos de Membresía',
      descripcion: 'Gestionar categorías de socios',
      icono: Users,
      color: '#10b981'
    },
    {
      id: 'canchas' as CategoriaConfig,
      nombre: 'Canchas y Espacios',
      descripcion: 'Administrar canchas disponibles',
      icono: MapPin,
      color: '#f59e0b'
    },
    {
      id: 'socios' as CategoriaConfig,
      nombre: 'Gestión de Socios',
      descripcion: 'Administrar socios del club',
      icono: UserCheck,
      color: '#06b6d4'
    },
    {
      id: 'sistema' as CategoriaConfig,
      nombre: 'Configuración del Sistema',
      descripcion: 'Ajustes técnicos y avanzados',
      icono: Settings,
      color: '#8b5cf6'
    }
  ];

  // Funciones para Membresías
  const agregarMembresia = async () => {
    if (!nuevaMembresia.nombre.trim()) return;
    
    try {
      setSubmitting(true);
      const nuevaTipo = await configuracionService.createTipoMembresia(nuevaMembresia);
      setTiposMembresia([...tiposMembresia, nuevaTipo]);
      setNuevaMembresia({ nombre: '', descripcion: '', color: '#3b82f6' });
      setMostrarModalMembresia(false);
    } catch (error) {
      console.error('Error al crear tipo de membresía:', error);
    } finally {
      setSubmitting(false);
    }
  };

  const confirmarEliminarMembresia = (membresia: TipoMembresia) => {
    setConfirmDelete({
      isOpen: true,
      type: 'membresia',
      item: membresia,
      title: 'Eliminar Tipo de Membresía',
      message: 'Esta acción no se puede deshacer. El tipo de membresía será eliminado permanentemente.'
    });
  };

  const confirmarEliminarCancha = (cancha: Cancha) => {
    setConfirmDelete({
      isOpen: true,
      type: 'cancha',
      item: cancha,
      title: 'Eliminar Cancha',
      message: 'Esta acción no se puede deshacer. La cancha será eliminada permanentemente.'
    });
  };

  const ejecutarEliminacion = async () => {
    try {
      if (confirmDelete.type === 'membresia') {
        await configuracionService.deleteTipoMembresia(confirmDelete.item.id);
        setTiposMembresia(tiposMembresia.filter(tipo => tipo.id !== confirmDelete.item.id));
      } else if (confirmDelete.type === 'cancha') {
        await configuracionService.deleteCancha(confirmDelete.item.id);
        setCanchas(canchas.filter(cancha => cancha.id !== confirmDelete.item.id));
      }
      setConfirmDelete({ isOpen: false, type: '', item: null, title: '', message: '' });
    } catch (error) {
      console.error('Error al eliminar:', error);
    }
  };

  // Funciones para Canchas
  const agregarCancha = async () => {
    if (!nuevaCancha.nombre.trim()) return;
    
    try {
      setSubmitting(true);
      const nuevaCanchaData = await configuracionService.createCancha(nuevaCancha);
      setCanchas([...canchas, nuevaCanchaData]);
      setNuevaCancha({ nombre: '', ubicacion: '', capacidad: 4 });
      setMostrarModalCancha(false);
    } catch (error) {
      console.error('Error al crear cancha:', error);
    } finally {
      setSubmitting(false);
    }
  };

  // Función para guardar configuración del club
  const guardarConfiguracionClub = async (datos: UpdateConfiguracionClubDto) => {
    try {
      setSubmitting(true);
      const configActualizada = await configuracionService.updateConfiguracionClub(datos);
      setConfigClub(configActualizada);
    } catch (error) {
      console.error('Error al guardar configuración:', error);
    } finally {
      setSubmitting(false);
    }
  };

  // Estilos
  const containerStyles = {
    minHeight: '100vh',
    backgroundColor: '#0f0f23',
    color: '#fff',
    fontFamily: 'Inter, system-ui, sans-serif'
  };

  const sidebarStyles = {
    width: '320px',
    backgroundColor: '#1a1a2e',
    padding: '24px',
    borderRight: '1px solid #2d2d44',
    minHeight: 'calc(100vh - 64px)'
  };

  const contentStyles = {
    flex: 1,
    padding: '32px',
    backgroundColor: '#16162a'
  };

  const cardStyles = {
    backgroundColor: '#1f2937',
    borderRadius: '16px',
    padding: '24px',
    border: '1px solid #374151',
    marginBottom: '24px'
  };

  const buttonStyles = {
    primary: {
      display: 'flex',
      alignItems: 'center',
      gap: '8px',
      backgroundColor: '#3b82f6',
      color: '#ffffff',
      border: 'none',
      borderRadius: '8px',
      padding: '12px 20px',
      fontSize: '14px',
      fontWeight: '600',
      cursor: 'pointer',
      transition: 'all 0.2s ease'
    },
    secondary: {
      display: 'flex',
      alignItems: 'center',
      gap: '8px',
      backgroundColor: 'transparent',
      color: '#9ca3af',
      border: '1px solid #4b5563',
      borderRadius: '8px',
      padding: '8px 12px',
      fontSize: '14px',
      cursor: 'pointer',
      transition: 'all 0.2s ease'
    },
    danger: {
      backgroundColor: '#ef4444',
      color: '#ffffff',
      border: 'none',
      borderRadius: '6px',
      padding: '8px 12px',
      fontSize: '12px',
      cursor: 'pointer',
      transition: 'all 0.2s ease'
    }
  };

  const inputStyles = {
    width: '100%',
    padding: '12px 16px',
    backgroundColor: '#374151',
    border: '1px solid #4b5563',
    borderRadius: '8px',
    color: '#ffffff',
    fontSize: '14px',
    outline: 'none',
    transition: 'border-color 0.2s ease'
  };

  const renderConfiguracionGeneral = () => {
    if (!configClub) {
      return (
        <div style={cardStyles}>
          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', padding: '40px' }}>
            <Loader2 size={24} className="animate-spin" style={{ marginRight: '8px' }} />
            <span style={{ color: '#9ca3af' }}>Cargando configuración...</span>
          </div>
        </div>
      );
    }

    return (
      <div style={cardStyles}>
        <h2 style={{ marginBottom: '24px', color: '#f9fafb' }}>Información del Club</h2>
        <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '20px' }}>
          <div>
            <label style={{ display: 'block', marginBottom: '8px', color: '#d1d5db' }}>
              Nombre del Club
            </label>
            <input
              type="text"
              value={configClub.nombre}
              onChange={(e) => setConfigClub({...configClub, nombre: e.target.value})}
              style={inputStyles}
            />
          </div>
          <div>
            <label style={{ display: 'block', marginBottom: '8px', color: '#d1d5db' }}>
              Teléfono
            </label>
            <input
              type="text"
              value={configClub.telefono || ''}
              onChange={(e) => setConfigClub({...configClub, telefono: e.target.value})}
              style={inputStyles}
            />
          </div>
          <div>
            <label style={{ display: 'block', marginBottom: '8px', color: '#d1d5db' }}>
              Dirección
            </label>
            <input
              type="text"
              value={configClub.direccion || ''}
              onChange={(e) => setConfigClub({...configClub, direccion: e.target.value})}
              style={inputStyles}
            />
          </div>
          <div>
            <label style={{ display: 'block', marginBottom: '8px', color: '#d1d5db' }}>
              Email
            </label>
            <input
              type="email"
              value={configClub.email || ''}
              onChange={(e) => setConfigClub({...configClub, email: e.target.value})}
              style={inputStyles}
            />
          </div>
          <div>
            <label style={{ display: 'block', marginBottom: '8px', color: '#d1d5db' }}>
              Sitio Web
            </label>
            <input
              type="text"
              value={configClub.sitio_web || ''}
              onChange={(e) => setConfigClub({...configClub, sitio_web: e.target.value})}
              style={inputStyles}
            />
          </div>
        </div>
        <button 
          style={{...buttonStyles.primary, marginTop: '24px'}}
          onClick={() => guardarConfiguracionClub(configClub)}
          disabled={submitting}
        >
          {submitting ? (
            <>
              <Loader2 size={16} className="animate-spin" />
              Guardando...
            </>
          ) : (
            <>
              <Save size={16} />
              Guardar Cambios
            </>
          )}
        </button>
      </div>
    );
  };

  const renderMembresias = () => (
    <div>
      <div style={cardStyles}>
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '24px' }}>
          <h2 style={{ color: '#f9fafb' }}>Tipos de Membresía</h2>
          <button 
            style={buttonStyles.primary}
            onClick={() => setMostrarModalMembresia(true)}
          >
            <Plus size={16} />
            Nuevo Tipo
          </button>
        </div>
        
        {tiposMembresia.length === 0 ? (
          <div style={{
            textAlign: 'center',
            padding: '40px',
            backgroundColor: '#374151',
            borderRadius: '12px',
            border: '2px dashed #4b5563'
          }}>
            <Users size={48} style={{ color: '#6b7280', marginBottom: '16px' }} />
            <h3 style={{ color: '#9ca3af', marginBottom: '8px' }}>No hay tipos de membresía configurados</h3>
            <p style={{ color: '#6b7280', fontSize: '14px', margin: 0 }}>
              Crea el primer tipo de membresía para tu club
            </p>
          </div>
        ) : (
          <div style={{ display: 'grid', gap: '12px' }}>
            {tiposMembresia.map((tipo) => {
              const isExpanded = membresiaExpandida === tipo.id;
              
              return (
                <div key={tipo.id} style={{
                  backgroundColor: '#374151',
                  borderRadius: '12px',
                  border: `2px solid ${tipo.color}`,
                  overflow: 'hidden'
                }}>
                  {/* Header clickeable */}
                  <div 
                    onClick={() => setMembresiaExpandida(isExpanded ? null : tipo.id)}
                    style={{
                      display: 'flex',
                      justifyContent: 'space-between',
                      alignItems: 'center',
                      padding: '16px',
                      cursor: 'pointer',
                      transition: 'background-color 0.2s ease'
                    }}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.backgroundColor = '#4b5563';
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.backgroundColor = 'transparent';
                    }}
                  >
                    <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                      <div style={{
                        width: '12px',
                        height: '12px',
                        borderRadius: '50%',
                        backgroundColor: tipo.color
                      }} />
                      <h4 style={{ margin: 0, color: '#f9fafb', fontSize: '16px' }}>{tipo.nombre}</h4>
                    </div>
                    <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                      {isExpanded ? <ChevronDown size={16} style={{ color: '#9ca3af' }} /> : <ChevronRight size={16} style={{ color: '#9ca3af' }} />}
                    </div>
                  </div>
                  
                  {/* Contenido expandible */}
                  {isExpanded && (
                    <div style={{
                      padding: '0 16px 16px',
                      borderTop: '1px solid #4b5563'
                    }}>
                      <div style={{ marginTop: '12px', marginBottom: '16px' }}>
                        <p style={{ margin: 0, color: '#9ca3af', fontSize: '14px', lineHeight: '1.5' }}>
                          {tipo.descripcion}
                        </p>
                      </div>
                      <div style={{ display: 'flex', gap: '8px', justifyContent: 'flex-end' }}>
                        <button style={buttonStyles.secondary}>
                          <Edit3 size={14} />
                          Editar
                        </button>
                        <button 
                          style={buttonStyles.danger}
                          onClick={(e) => {
                            e.stopPropagation();
                            confirmarEliminarMembresia(tipo);
                          }}
                        >
                          <Trash2 size={14} />
                          Eliminar
                        </button>
                      </div>
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        )}
      </div>
    </div>
  );

  const renderCanchas = () => (
    <div>
      <div style={cardStyles}>
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '24px' }}>
          <h2 style={{ color: '#f9fafb' }}>Canchas y Espacios</h2>
          <button 
            style={buttonStyles.primary}
            onClick={() => setMostrarModalCancha(true)}
          >
            <Plus size={16} />
            Nueva Cancha
          </button>
        </div>
        
        {canchas.length === 0 ? (
          <div style={{
            textAlign: 'center',
            padding: '40px',
            backgroundColor: '#374151',
            borderRadius: '12px',
            border: '2px dashed #4b5563'
          }}>
            <MapPin size={48} style={{ color: '#6b7280', marginBottom: '16px' }} />
            <h3 style={{ color: '#9ca3af', marginBottom: '8px' }}>No hay canchas configuradas</h3>
            <p style={{ color: '#6b7280', fontSize: '14px', margin: 0 }}>
              Agrega la primera cancha de tu club
            </p>
          </div>
        ) : (
          <div style={{ display: 'grid', gap: '16px' }}>
            {canchas.map((cancha) => (
              <div key={cancha.id} style={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                backgroundColor: '#374151',
                padding: '16px',
                borderRadius: '12px',
                border: '1px solid #4b5563'
              }}>
                <div>
                  <h4 style={{ margin: 0, color: '#f9fafb', marginBottom: '4px' }}>{cancha.nombre}</h4>
                  <p style={{ margin: 0, color: '#9ca3af', fontSize: '14px' }}>
                    📍 {cancha.ubicacion} • 👥 Capacidad: {cancha.capacidad} jugadores
                  </p>
                </div>
                <div style={{ display: 'flex', gap: '8px' }}>
                  <button style={buttonStyles.secondary}>
                    <Edit3 size={14} />
                    Editar
                  </button>
                  <button 
                    style={buttonStyles.danger}
                    onClick={() => confirmarEliminarCancha(cancha)}
                  >
                    <Trash2 size={14} />
                    Eliminar
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );

  };

  const renderSocios = () => {
    return (
      <div style={{ 
        backgroundColor: 'transparent',
        padding: 0,
        margin: 0
      }}>
        <SociosPage isSubModule={true} />
      </div>
    );
  };

  const renderSistema = () => (
    <div>
      {/* Notificaciones */}
      <div style={cardStyles}>
        <h2 style={{ marginBottom: '24px', color: '#f9fafb' }}>Notificaciones</h2>
        <div style={{ display: 'grid', gap: '16px' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '16px', backgroundColor: '#374151', borderRadius: '8px' }}>
            <div>
              <h4 style={{ margin: 0, color: '#f9fafb' }}>Email de Confirmación</h4>
              <p style={{ margin: 0, color: '#9ca3af', fontSize: '14px' }}>Enviar confirmación automática al reservar turno</p>
            </div>
            <input type="checkbox" defaultChecked />
          </div>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '16px', backgroundColor: '#374151', borderRadius: '8px' }}>
            <div>
              <h4 style={{ margin: 0, color: '#f9fafb' }}>Recordatorios</h4>
              <p style={{ margin: 0, color: '#9ca3af', fontSize: '14px' }}>Enviar recordatorio 24h antes del turno</p>
            </div>
            <input type="checkbox" defaultChecked />
          </div>
        </div>
      </div>

      {/* Reservas */}
      <div style={cardStyles}>
        <h2 style={{ marginBottom: '24px', color: '#f9fafb' }}>Gestión de Reservas</h2>
        <div style={{ display: 'grid', gap: '16px' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '16px', backgroundColor: '#374151', borderRadius: '8px' }}>
            <div>
              <h4 style={{ margin: 0, color: '#f9fafb' }}>Reservas Automáticas</h4>
              <p style={{ margin: 0, color: '#9ca3af', fontSize: '14px' }}>Permitir reservas sin confirmación manual</p>
            </div>
            <input type="checkbox" defaultChecked />
          </div>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '16px', backgroundColor: '#374151', borderRadius: '8px' }}>
            <div>
              <h4 style={{ margin: 0, color: '#f9fafb' }}>Límite de Reservas por Usuario</h4>
              <p style={{ margin: 0, color: '#9ca3af', fontSize: '14px' }}>Máximo número de reservas activas por socio</p>
            </div>
            <select style={{ backgroundColor: '#4b5563', color: '#fff', border: 'none', borderRadius: '6px', padding: '8px' }}>
              <option value="3">3 reservas</option>
              <option value="5">5 reservas</option>
              <option value="unlimited">Sin límite</option>
            </select>
          </div>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '16px', backgroundColor: '#374151', borderRadius: '8px' }}>
            <div>
              <h4 style={{ margin: 0, color: '#f9fafb' }}>Anticipación Máxima</h4>
              <p style={{ margin: 0, color: '#9ca3af', fontSize: '14px' }}>Días de anticipación para reservar</p>
            </div>
            <select style={{ backgroundColor: '#4b5563', color: '#fff', border: 'none', borderRadius: '6px', padding: '8px' }}>
              <option value="7">7 días</option>
              <option value="15">15 días</option>
              <option value="30">30 días</option>
            </select>
          </div>
        </div>
      </div>

      {/* Horarios */}
      <div style={cardStyles}>
        <h2 style={{ marginBottom: '24px', color: '#f9fafb' }}>Horarios de Operación</h2>
        <div style={{ display: 'grid', gap: '16px' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '16px', backgroundColor: '#374151', borderRadius: '8px' }}>
            <div>
              <h4 style={{ margin: 0, color: '#f9fafb' }}>Hora de Apertura</h4>
              <p style={{ margin: 0, color: '#9ca3af', fontSize: '14px' }}>Hora de inicio de operaciones</p>
            </div>
            <input type="time" defaultValue="06:00" style={{ backgroundColor: '#4b5563', color: '#fff', border: 'none', borderRadius: '6px', padding: '8px' }} />
          </div>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '16px', backgroundColor: '#374151', borderRadius: '8px' }}>
            <div>
              <h4 style={{ margin: 0, color: '#f9fafb' }}>Hora de Cierre</h4>
              <p style={{ margin: 0, color: '#9ca3af', fontSize: '14px' }}>Hora de fin de operaciones</p>
            </div>
            <input type="time" defaultValue="22:00" style={{ backgroundColor: '#4b5563', color: '#fff', border: 'none', borderRadius: '6px', padding: '8px' }} />
          </div>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '16px', backgroundColor: '#374151', borderRadius: '8px' }}>
            <div>
              <h4 style={{ margin: 0, color: '#f9fafb' }}>Duración de Turnos</h4>
              <p style={{ margin: 0, color: '#9ca3af', fontSize: '14px' }}>Tiempo estándar por turno</p>
            </div>
            <select style={{ backgroundColor: '#4b5563', color: '#fff', border: 'none', borderRadius: '6px', padding: '8px' }}>
              <option value="60">1 hora</option>
              <option value="90">1.5 horas</option>
              <option value="120">2 horas</option>
            </select>
          </div>
        </div>
      </div>

      {/* Sistema */}
      <div style={cardStyles}>
        <h2 style={{ marginBottom: '24px', color: '#f9fafb' }}>Sistema</h2>
        <div style={{ display: 'grid', gap: '16px' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '16px', backgroundColor: '#374151', borderRadius: '8px' }}>
            <div>
              <h4 style={{ margin: 0, color: '#f9fafb' }}>Backup Automático</h4>
              <p style={{ margin: 0, color: '#9ca3af', fontSize: '14px' }}>Respaldar datos automáticamente</p>
            </div>
            <input type="checkbox" defaultChecked />
          </div>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '16px', backgroundColor: '#374151', borderRadius: '8px' }}>
            <div>
              <h4 style={{ margin: 0, color: '#f9fafb' }}>Modo Mantenimiento</h4>
              <p style={{ margin: 0, color: '#9ca3af', fontSize: '14px' }}>Deshabilitar reservas para mantenimiento</p>
            </div>
            <input type="checkbox" />
          </div>
        </div>
      </div>
    </div>
  );

  const renderContenido = () => {
    switch (categoriaActiva) {
      case 'general':
        return renderConfiguracionGeneral();
      case 'membresias':
        return renderMembresias();
      case 'canchas':
        return renderCanchas();
      case 'socios':
        return renderSocios();
      case 'sistema':
        return renderSistema();
      default:
        return renderConfiguracionGeneral();
    }
  };

  return (
    <div style={containerStyles}>
      <GlobalNavigation />
      
      {loading ? (
        <div style={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          minHeight: 'calc(100vh - 64px)',
          flexDirection: 'column',
          gap: '16px'
        }}>
          <Loader2 size={32} className="animate-spin" style={{ color: '#3b82f6' }} />
          <span style={{ color: '#9ca3af', fontSize: '18px' }}>Cargando configuración...</span>
        </div>
      ) : (
        <div style={{ display: 'flex' }}>
        {/* Sidebar de Categorías */}
        <div style={sidebarStyles}>
          <div style={{ marginBottom: '32px' }}>
            <h2 style={{ 
              color: '#f9fafb', 
              fontSize: '20px', 
              fontWeight: '700',
              marginBottom: '8px',
              display: 'flex',
              alignItems: 'center',
              gap: '8px'
            }}>
              <Settings size={24} />
              Configuración
            </h2>
            <p style={{ color: '#9ca3af', fontSize: '14px', margin: 0 }}>
              Personaliza tu club de tenis
            </p>
          </div>

          <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
            {categorias.map((categoria) => {
              const Icono = categoria.icono;
              const activa = categoriaActiva === categoria.id;
              
              return (
                <button
                  key={categoria.id}
                  onClick={() => setCategoriaActiva(categoria.id)}
                  style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: '12px',
                    padding: '16px',
                    backgroundColor: activa ? categoria.color + '20' : 'transparent',
                    border: activa ? `1px solid ${categoria.color}` : '1px solid transparent',
                    borderRadius: '12px',
                    color: activa ? '#ffffff' : '#9ca3af',
                    cursor: 'pointer',
                    transition: 'all 0.2s ease',
                    textAlign: 'left',
                    width: '100%'
                  }}
                  onMouseEnter={(e) => {
                    if (!activa) {
                      e.currentTarget.style.backgroundColor = '#374151';
                      e.currentTarget.style.color = '#f9fafb';
                    }
                  }}
                  onMouseLeave={(e) => {
                    if (!activa) {
                      e.currentTarget.style.backgroundColor = 'transparent';
                      e.currentTarget.style.color = '#9ca3af';
                    }
                  }}
                >
                  <Icono size={20} color={activa ? categoria.color : 'currentColor'} />
                  <div style={{ flex: 1 }}>
                    <div style={{ fontWeight: '500', fontSize: '14px' }}>
                      {categoria.nombre}
                    </div>
                    <div style={{ fontSize: '12px', opacity: 0.8 }}>
                      {categoria.descripcion}
                    </div>
                  </div>
                  {activa && <ChevronRight size={16} />}
                </button>
              );
            })}
          </div>
        </div>

        {/* Contenido Principal */}
        <div style={contentStyles}>
          {renderContenido()}
        </div>
      </div>
      )}

      {/* Modal Nueva Membresía */}
      {mostrarModalMembresia && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(0, 0, 0, 0.75)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div style={{
            backgroundColor: '#1f2937',
            borderRadius: '16px',
            padding: '32px',
            width: '500px',
            border: '1px solid #374151'
          }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '24px' }}>
              <h3 style={{ color: '#f9fafb', margin: 0 }}>Nuevo Tipo de Membresía</h3>
              <button
                onClick={() => setMostrarModalMembresia(false)}
                style={{ background: 'none', border: 'none', color: '#9ca3af', cursor: 'pointer' }}
              >
                <X size={20} />
              </button>
            </div>
            
            <div style={{ marginBottom: '20px' }}>
              <label style={{ display: 'block', marginBottom: '8px', color: '#d1d5db' }}>
                Nombre
              </label>
              <input
                type="text"
                value={nuevaMembresia.nombre}
                onChange={(e) => setNuevaMembresia({...nuevaMembresia, nombre: e.target.value})}
                style={inputStyles}
                placeholder="Ej: Socio Regular"
              />
            </div>

            <div style={{ marginBottom: '20px' }}>
              <label style={{ display: 'block', marginBottom: '8px', color: '#d1d5db' }}>
                Descripción
              </label>
              <input
                type="text"
                value={nuevaMembresia.descripcion}
                onChange={(e) => setNuevaMembresia({...nuevaMembresia, descripcion: e.target.value})}
                style={inputStyles}
                placeholder="Descripción del tipo de membresía"
              />
            </div>

            <div style={{ marginBottom: '24px' }}>
              <label style={{ display: 'block', marginBottom: '8px', color: '#d1d5db' }}>
                Color
              </label>
              <input
                type="color"
                value={nuevaMembresia.color}
                onChange={(e) => setNuevaMembresia({...nuevaMembresia, color: e.target.value})}
                style={{...inputStyles, height: '50px'}}
              />
            </div>

            <div style={{ display: 'flex', gap: '12px', justifyContent: 'flex-end' }}>
              <button 
                onClick={() => setMostrarModalMembresia(false)}
                style={buttonStyles.secondary}
              >
                Cancelar
              </button>
              <button 
                onClick={agregarMembresia}
                style={buttonStyles.primary}
                disabled={submitting}
              >
                {submitting ? (
                  <>
                    <Loader2 size={16} className="animate-spin" />
                    Guardando...
                  </>
                ) : (
                  <>
                    <Save size={16} />
                    Guardar
                  </>
                )}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Modal Nueva Cancha */}
      {mostrarModalCancha && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(0, 0, 0, 0.75)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div style={{
            backgroundColor: '#1f2937',
            borderRadius: '16px',
            padding: '32px',
            width: '500px',
            border: '1px solid #374151'
          }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '24px' }}>
              <h3 style={{ color: '#f9fafb', margin: 0 }}>Nueva Cancha</h3>
              <button 
                onClick={() => setMostrarModalCancha(false)}
                style={{ background: 'none', border: 'none', color: '#9ca3af', cursor: 'pointer' }}
              >
                <X size={20} />
              </button>
            </div>
            
            <div style={{ marginBottom: '20px' }}>
              <label style={{ display: 'block', marginBottom: '8px', color: '#d1d5db' }}>
                Nombre
              </label>
              <input
                type="text"
                value={nuevaCancha.nombre}
                onChange={(e) => setNuevaCancha({...nuevaCancha, nombre: e.target.value})}
                style={inputStyles}
                placeholder="Ej: Cancha Principal"
              />
            </div>

            <div style={{ marginBottom: '20px' }}>
              <label style={{ display: 'block', marginBottom: '8px', color: '#d1d5db' }}>
                Ubicación
              </label>
              <input
                type="text"
                value={nuevaCancha.ubicacion}
                onChange={(e) => setNuevaCancha({...nuevaCancha, ubicacion: e.target.value})}
                style={inputStyles}
                placeholder="Ej: Sector A"
              />
            </div>

            <div style={{ marginBottom: '24px' }}>
              <label style={{ display: 'block', marginBottom: '8px', color: '#d1d5db' }}>
                Capacidad (jugadores)
              </label>
              <input
                type="number"
                value={nuevaCancha.capacidad}
                onChange={(e) => setNuevaCancha({...nuevaCancha, capacidad: parseInt(e.target.value)})}
                style={inputStyles}
                min="2"
                max="8"
              />
            </div>

            <div style={{ display: 'flex', gap: '12px', justifyContent: 'flex-end' }}>
              <button 
                onClick={() => setMostrarModalCancha(false)}
                style={buttonStyles.secondary}
              >
                Cancelar
              </button>
              <button 
                onClick={agregarCancha}
                style={buttonStyles.primary}
                disabled={submitting}
              >
                {submitting ? (
                  <>
                    <Loader2 size={16} className="animate-spin" />
                    Guardando...
                  </>
                ) : (
                  <>
                    <Save size={16} />
                    Guardar
                  </>
                )}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Modal de Confirmación de Eliminación */}
      {confirmDelete.isOpen && (
        <ConfirmDeleteModal
          isOpen={confirmDelete.isOpen}
          onClose={() => setConfirmDelete({ isOpen: false, type: '', item: null, title: '', message: '' })}
          onConfirm={ejecutarEliminacion}
          title={confirmDelete.title}
          message={confirmDelete.message}
          itemName={confirmDelete.item?.nombre || ''}
          itemDescription={
            confirmDelete.type === 'membresia' 
              ? confirmDelete.item?.descripcion 
              : confirmDelete.type === 'cancha'
              ? `${confirmDelete.item?.ubicacion} • Capacidad: ${confirmDelete.item?.capacidad} jugadores`
              : ''
          }
        />
      )}
    </div>
  );
};

export default ConfiguracionPage;